package sandbox

const (
	TEMPLATE_INTERNAL int = 0 + iota
	TEMPLATE_FILE
)

type TemplateDesc struct {
	Origin      int
	Description string
	Notes       string
	Contents    string
}

type TemplateCollection map[string]TemplateDesc
type AllTemplateCollection map[string]TemplateCollection

var (
	Copyright string = `
# MySQL Minimum Permissions tool
# This package is based on dbdeployer by Giuseppe Maxia
# Visit https://github.com/datacharmer/mysql_minimum_permissions tool to check the original implementation
`
	init_db_template string = `#!/bin/bash
{{.Copyright}}
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}
BASEDIR={{.Basedir}}
export LD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$LD_LIBRARY_PATH
export DYLD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$DYLD_LIBRARY_PATH
export SBDIR={{.SandboxDir}}
export DATADIR=$SBDIR/data
cd $SBDIR
if [ -d $DATADIR/mysql ]
then
	echo "Initialization already done."
	echo "This script should run only once."
	exit 0
fi

{{.InitScript}} \
    {{.InitDefaults}} \
    --user={{.OsUser}} \
    --basedir=$BASEDIR \
    --datadir=$DATADIR \
    --tmpdir=$SBDIR/tmp {{.ExtraInitFlags}}
exit_code=$?
if [ "$exit_code" == "0" ]
then
	echo "Database installed in $SBDIR"
else
	echo "Error installing database in $SBDIR"
fi
{{.FixUuidFile1}}
{{.FixUuidFile2}}
echo "[auto]" > $DATADIR/auto.cnf
echo "server-uuid=00008012-0000-0000-0000-000000008012" >> $DATADIR/auto.cnf
`

	start_template string = `#!/bin/bash
{{.Copyright}}
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}
BASEDIR={{.Basedir}}
[ -z "$SLEEP_TIME" ] && SLEEP_TIME=1
export LD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$LD_LIBRARY_PATH
export DYLD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$DYLD_LIBRARY_PATH
MYSQLD_SAFE="bin/mysqld_safe"
SBDIR={{.SandboxDir}}
PIDFILE=$SBDIR/data/mysql_sandbox{{.Port}}.pid
CUSTOM_MYSQLD={{.CustomMysqld}}
if [ -n "$CUSTOM_MYSQLD" ]
then
	CUSTOM_MYSQLD="--mysqld=$CUSTOM_MYSQLD"
fi
if [ ! -f $BASEDIR/$MYSQLD_SAFE ]
then
	echo "mysqld_safe not found in $BASEDIR/bin/"
	exit 1
fi
MYSQLD_SAFE_OK=$(sh -n $BASEDIR/$MYSQLD_SAFE 2>&1)
if [ "$MYSQLD_SAFE_OK" == "" ]
then
	if [ "$SBDEBUG" == "2" ]
	then
		echo "$MYSQLD_SAFE OK"
	fi
else
	echo "$MYSQLD_SAFE has errors"
	echo "((( $MYSQLD_SAFE_OK )))"
	exit 1
fi

function is_running
{
	if [ -f $PIDFILE ]
	then
		MYPID=$(cat $PIDFILE)
		ps -p $MYPID | grep $MYPID
	fi
}

TIMEOUT=180
if [ -n "$(is_running)" ]
then
	echo "sandbox server already started (found pid file $PIDFILE)"
else
	if [ -f $PIDFILE ]
	then
		# Server is not running. Removing stale pid-file
		rm -f $PIDFILE
	fi
	CURDIR=$(pwd)
	cd $BASEDIR
	if [ "$SBDEBUG" = "" ]
	then
		$MYSQLD_SAFE --defaults-file=$SBDIR/my.sandbox.cnf $CUSTOM_MYSQLD $@ > /dev/null 2>&1 &
	else
		$MYSQLD_SAFE --defaults-file=$SBDIR/my.sandbox.cnf $CUSTOM_MYSQLD $@ > "$SBDIR/start.log" 2>&1 &
	fi
	cd $CURDIR
	ATTEMPTS=1
	while [ ! -f $PIDFILE ]
	do
		ATTEMPTS=$(( $ATTEMPTS + 1 ))
		echo -n "."
		if [ $ATTEMPTS = $TIMEOUT ]
		then
			break
		fi
		sleep $SLEEP_TIME
	done
fi

if [ -f $PIDFILE ]
then
	echo " sandbox server started"
else
	echo " sandbox server not started yet"
	exit 1
fi
`
	use_template string = `#!/bin/bash
{{.Copyright}}
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}
BASEDIR={{.Basedir}}
export LD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$LD_LIBRARY_PATH
export DYLD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$DYLD_LIBRARY_PATH
SBDIR={{.SandboxDir}}
PIDFILE=$SBDIR/data/mysql_sandbox{{.Port}}.pid
[ -n "$TEST_REPL_DELAY" -a -f $SBDIR/data/mysql-relay.index ] && sleep $TEST_REPL_DELAY
[ -z "$MYSQL_EDITOR" ] && MYSQL_EDITOR="$BASEDIR/bin/mysql"
if [ ! -x $MYSQL_EDITOR ]
then
	if [ -x $SBDIR/$MYSQL_EDITOR ]
	then
		MYSQL_EDITOR=$SBDIR/$MYSQL_EDITOR
	else
		echo "MYSQL_EDITOR '$MYSQL_EDITOR' not found or not executable"
		exit 1
	fi
fi
HISTDIR=
[ -z "$HISTDIR" ] && HISTDIR=$SBDIR
export MYSQL_HISTFILE="$HISTDIR/.mysql_history"
MY_CNF=$SBDIR/my.sandbox.cnf
MY_CNF_NO_PASSWORD=$SBDIR/my.sandbox_np.cnf
if [ -n "$NOPASSWORD" ]
then
	grep -v '^password' < $MY_CNF > $MY_CNF_NO_PASSWORD
	MY_CNF=$MY_CNF_NO_PASSWORD
fi
if [ -f $PIDFILE ]
then
	$MYSQL_EDITOR --defaults-file=$MY_CNF $MYCLIENT_OPTIONS "$@"
else
	exit 1
fi
`
	stop_template string = `#!/bin/bash
{{.Copyright}}
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}
BASEDIR={{.Basedir}}
[ -z "$SLEEP_TIME" ] && SLEEP_TIME=1
export LD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$LD_LIBRARY_PATH
export DYLD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$DYLD_LIBRARY_PATH
SBDIR={{.SandboxDir}}
PIDFILE=$SBDIR/data/mysql_sandbox{{.Port}}.pid

MYSQL_ADMIN="$BASEDIR/bin/mysqladmin"

function is_running
{
	if [ -f $PIDFILE ]
	then
		MYPID=$(cat $PIDFILE)
		ps -p $MYPID | grep $MYPID
	fi
}

if [ -n "$(is_running)" ]
then
	echo "stop $SBDIR"
	# echo "$MYSQL_ADMIN --defaults-file=$SBDIR/my.sandbox.cnf $MYCLIENT_OPTIONS shutdown"
	$MYSQL_ADMIN --defaults-file=$SBDIR/my.sandbox.cnf $MYCLIENT_OPTIONS shutdown
	sleep $SLEEP_TIME
else
	if [ -f $PIDFILE ]
	then
		rm -f $PIDFILE
	fi
fi

if [ -n "$(is_running)" ]
then
	# use the send_kill script if the server is not responsive
	$SBDIR/send_kill
fi
`
	clear_template string = `#!/bin/bash
{{.Copyright}}
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}

BASEDIR={{.Basedir}}
export LD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$LD_LIBRARY_PATH
export DYLD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$DYLD_LIBRARY_PATH
SBDIR={{.SandboxDir}}
PIDFILE=$SBDIR/data/mysql_sandbox{{.Port}}.pid
cd $SBDIR

#
# attempt to drop databases gracefully
#

function is_running
{
	if [ -f $PIDFILE ]
	then
		MYPID=$(cat $PIDFILE)
		ps -p $MYPID | grep $MYPID
	fi
}

if [ -n "$(is_running)" ]
then
	for D in $(echo "show databases " | ./use -B -N | grep -v "^mysql$" | grep -iv "^information_schema$" | grep -iv "^performance_schema" | grep -ivw "^sys")
	do
		echo "set sql_mode=ansi_quotes;drop database \"$D\"" | ./use
	done
	VERSION={{.Version}}
	is_slave=$(ls data | grep relay)
	if [ -n "$is_slave" ]
	then
		./use -e "stop slave; reset slave;"
	fi
	if [[ "$VERSION" > "5.1" ]]
	then
		for T in general_log slow_log plugin
		do
			exists_table=$(./use -e "show tables from mysql like '$T'")
			if [ -n "$exists_table" ]
			then
				./use -e "truncate mysql.$T"
			fi
		done
	fi
fi

is_master=$(ls data | grep 'mysql-bin')
if [ -n "$is_master" ]
then
	./use -e 'reset master'
fi

./stop
rm -f data/$(hostname)*
rm -f data/log.0*
rm -f data/*.log

#
# remove all databases if any (up to 8.0)
#
if [[ "$VERSION" < "8.0" ]]
then
	for D in $(ls -d data/*/ | grep -w -v mysql | grep -iv performance_schema | grep -ivw sys)
	do
		rm -rf $D
	done
	mkdir data/test
fi
`

	my_cnf_template string = `
{{.Copyright}}
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}
[mysql]
prompt='{{.Prompt}} [\h] {\u} (\d) > '
#

[client]
user         = {{.DbUser}}
password     = {{.DbPassword}}
port         = {{.Port}}
socket       = {{.GlobalTmpDir}}/mysql_sandbox{{.Port}}.sock

[mysqld]
user         = {{.OsUser}}
port         = {{.Port}}
socket       = {{.GlobalTmpDir}}/mysql_sandbox{{.Port}}.sock
basedir      = {{.Basedir}}
datadir      = {{.Datadir}}
tmpdir       = {{.Tmpdir}}
pid-file     = {{.Datadir}}/mysql_sandbox{{.Port}}.pid
bind-address = {{.BindAddress}}
log-error    = {{.Tmpdir}}/msandbox.err
{{.ReportHost}}
{{.ReportPort}}
{{.ServerId}}
{{.ReplOptions}}
{{.GtidOptions}}
{{.SemiSyncOptions}}

{{.ExtraOptions}}
`
	send_kill_template string = `#!/bin/bash
{{.Copyright}}
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}

BASEDIR={{.Basedir}}
[ -z "$SLEEP_TIME" ] && SLEEP_TIME=1
export LD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$LD_LIBRARY_PATH
export DYLD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$DYLD_LIBRARY_PATH
SBDIR={{.SandboxDir}}
PIDFILE=$SBDIR/data/mysql_sandbox{{.Port}}.pid

TIMEOUT=30

function is_running
{
	if [ -f $PIDFILE ]
	then
		MYPID=$(cat $PIDFILE)
		ps -p $MYPID | grep $MYPID
	fi
}

mysqld_safe_pid=$(ps auxw | grep mysqld_safe | grep "defaults-file=$SBDIR" | awk '{print $2}')
if [ -n "$(is_running)" ]
then
	MYPID=$(cat $PIDFILE)
	kill -9 $mysqld_safe_pid
	echo "Attempting normal termination --- kill -15 $MYPID"
	kill -15 $MYPID
	# give it a chance to exit peacefully
	ATTEMPTS=1
	while [ -f $PIDFILE ]
	do
		ATTEMPTS=$(( $ATTEMPTS + 1 ))
		if [ $ATTEMPTS = $TIMEOUT ]
		then
			break
		fi
		sleep $SLEEP_TIME
	done
	if [ -f $PIDFILE ]
	then
		echo "SERVER UNRESPONSIVE --- kill -9 $MYPID"
		kill -9 $MYPID
		rm -f $PIDFILE
	fi
else
	# server not running - removing stale pid-file
	if [ -f $PIDFILE ]
	then
		rm -f $PIDFILE
	fi
fi
`
	status_template string = `#!/bin/bash
{{.Copyright}}
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}

BASEDIR={{.Basedir}}
export LD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$LD_LIBRARY_PATH
export DYLD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$DYLD_LIBRARY_PATH
SBDIR={{.SandboxDir}}
PIDFILE=$SBDIR/data/mysql_sandbox{{.Port}}.pid
baredir=$(basename $SBDIR)

source $SBDIR/sb_include
node_status=off
exit_code=0
if [ -f $PIDFILE ]
then
	MYPID=$(cat $PIDFILE)
	running=$(ps -p $MYPID | grep $MYPID)
	if [ -n "$running" ]
	then
		node_status=on
		exit_code=0
	fi
fi
echo "$baredir $node_status"
exit $exit_code
`
	restart_template string = `#!/bin/bash
{{.Copyright}}
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}

SBDIR={{.SandboxDir}}
$SBDIR/stop
$SBDIR/start $@
`
	load_grants_template string = `#!/bin/bash
{{.Copyright}}
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}

BASEDIR={{.Basedir}}
export LD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$LD_LIBRARY_PATH
export DYLD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$DYLD_LIBRARY_PATH
SBDIR={{.SandboxDir}}
PIDFILE=$SBDIR/data/mysql_sandbox{{.Port}}.pid
SOURCE_SCRIPT=$1
if [ -z "$SOURCE_SCRIPT" ]
then
	SOURCE_SCRIPT=grants.mysql
fi
PRE_GRANT_SCRIPTS="grants.mysql pre_grants.sql"
if [ -n "$(echo $PRE_GRANT_SCRIPTS | grep $SOURCE_SCRIPT)" ]
then
	export NOPASSWORD=1
fi
source $SBDIR/sb_include
if [ -n "$NOPASSWORD" ]
then
	MYSQL="$BASEDIR/bin/mysql --no-defaults --socket={{.GlobalTmpDir}}/mysql_sandbox{{.Port}}.sock --port={{.Port}}"
else
	MYSQL="$BASEDIR/bin/mysql --defaults-file=$SBDIR/my.sandbox.cnf"
fi
VERBOSE_SQL=''
[ -n "$SBDEBUG" ] && VERBOSE_SQL=-v
if [ ! -f $SBDIR/$SOURCE_SCRIPT ]
then
	[ -n "$VERBOSE_SQL" ] && echo "$SBDIR/$SOURCE_SCRIPT not found"
	exit 0
fi
echo "$MYSQL -u root -t $VERBOSE_SQL < $SBDIR/$SOURCE_SCRIPT"
$MYSQL -u root -t $VERBOSE_SQL < $SBDIR/$SOURCE_SCRIPT
`
	grants_template5x string = `
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}
use mysql;
set password=password('{{.DbPassword}}');
grant all on *.* to '{{.DbUser}}'@'{{.RemoteAccess}}' identified by '{{.DbPassword}}' WITH GRANT OPTION;
grant all on *.* to '{{.DbUser}}'@'localhost' identified by '{{.DbPassword}}' WITH GRANT OPTION;
grant SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER,
    SHOW DATABASES,CREATE TEMPORARY TABLES,LOCK TABLES, EXECUTE
    on *.* to 'msandbox_rw'@'localhost' identified by '{{.DbPassword}}';
grant SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER,
    SHOW DATABASES,CREATE TEMPORARY TABLES,LOCK TABLES, EXECUTE
    on *.* to 'msandbox_rw'@'{{.RemoteAccess}}' identified by '{{.DbPassword}}';
grant SELECT,EXECUTE on *.* to 'msandbox_ro'@'{{.RemoteAccess}}' identified by '{{.DbPassword}}';
grant SELECT,EXECUTE on *.* to 'msandbox_ro'@'localhost' identified by '{{.DbPassword}}';
grant REPLICATION SLAVE on *.* to '{{.RplUser}}'@'{{.RemoteAccess}}' identified by '{{.RplPassword}}';
delete from user where password='';
delete from db where user='';
flush privileges;
create database if not exists test;
`
	grants_template57 string = `
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}
use mysql;
set password='{{.DbPassword}}';

create user '{{.DbUser}}'@'{{.RemoteAccess}}' identified by '{{.DbPassword}}';
grant all on *.* to {{.DbUser}}@'{{.RemoteAccess}}' WITH GRANT OPTION;

-- create user '{{.DbUser}}'@'localhost' identified by '{{.DbPassword}}';
grant all on *.* to {{.DbUser}}@'localhost' WITH GRANT OPTION;

create user 'msandbox_rw'@'localhost' identified by '{{.DbPassword}}';
grant SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER,
    SHOW DATABASES,CREATE TEMPORARY TABLES,LOCK TABLES, EXECUTE
    on *.* to 'msandbox_rw'@'localhost' WITH GRANT OPTION;

create user msandbox_rw@'{{.RemoteAccess}}' identified by '{{.DbPassword}}';
grant SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER,
    SHOW DATABASES,CREATE TEMPORARY TABLES,LOCK TABLES, EXECUTE
    on *.* to msandbox_rw@'{{.RemoteAccess}}' WITH GRANT OPTION;

create user 'msandbox_ro'@'{{.RemoteAccess}}' identified by '{{.DbPassword}}';
create user 'msandbox_ro'@'localhost' identified by '{{.DbPassword}}';
create user '{{.RplUser}}'@'{{.RemoteAccess}}' identified by '{{.RplPassword}}';
grant SELECT,EXECUTE on *.* to 'msandbox_ro'@'{{.RemoteAccess}}';
grant SELECT,EXECUTE on *.* to 'msandbox_ro'@'localhost';
grant REPLICATION SLAVE on *.* to '{{.RplUser}}'@'{{.RemoteAccess}}';
create schema if not exists test;
`
	grants_template8x string = `
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}
USE mysql;
SET PASSWORD='{{.DbPassword}}';

CREATE ROLE R_DO_IT_ALL;
CREATE ROLE R_READ_WRITE;
CREATE ROLE R_READ_ONLY;
CREATE ROLE R_REPLICATION;

GRANT ALL ON *.* to R_DO_IT_ALL WITH GRANT OPTION;
GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER, SHOW DATABASES,CREATE TEMPORARY TABLES,LOCK TABLES, EXECUTE ON *.* TO R_READ_WRITE;
GRANT SELECT,EXECUTE ON *.* TO R_READ_ONLY;
GRANT REPLICATION SLAVE ON *.* TO R_REPLICATION;

CREATE USER '{{.DbUser}}'@'{{.RemoteAccess}}' IDENTIFIED BY '{{.DbPassword}}';
-- CREATE USER '{{.DbUser}}'@'localhost' IDENTIFIED BY '{{.DbPassword}}';
-- CREATE USER '{{.DbUser}}'@'{{.RemoteAccess}}' IDENTIFIED WITH mysql_native_password BY '{{.DbPassword}}';
-- CREATE USER '{{.DbUser}}'@'localhost' IDENTIFIED WITH mysql_native_password BY '{{.DbPassword}}';

GRANT R_DO_IT_ALL TO '{{.DbUser}}'@'{{.RemoteAccess}}';
SET DEFAULT ROLE R_DO_IT_ALL TO '{{.DbUser}}'@'{{.RemoteAccess}}';

GRANT R_DO_IT_ALL to '{{.DbUser}}'@'localhost';
SET DEFAULT ROLE R_DO_IT_ALL TO '{{.DbUser}}'@'localhost';

CREATE USER 'msandbox_rw'@'localhost' IDENTIFIED WITH mysql_native_password BY '{{.DbPassword}}';
CREATE USER 'msandbox_rw'@'{{.RemoteAccess}}' IDENTIFIED WITH mysql_native_password BY '{{.DbPassword}}';

GRANT R_READ_WRITE TO 'msandbox_rw'@'localhost';
SET DEFAULT ROLE R_READ_WRITE TO 'msandbox_rw'@'localhost';
GRANT R_READ_WRITE TO 'msandbox_rw'@'{{.RemoteAccess}}';
SET DEFAULT ROLE R_READ_WRITE TO 'msandbox_rw'@'{{.RemoteAccess}}';

CREATE USER 'msandbox_ro'@'{{.RemoteAccess}}' IDENTIFIED BY '{{.DbPassword}}';
CREATE USER 'msandbox_ro'@'localhost' IDENTIFIED BY '{{.DbPassword}}';
CREATE USER '{{.RplUser}}'@'{{.RemoteAccess}}' IDENTIFIED BY '{{.RplPassword}}';

GRANT R_READ_ONLY TO 'msandbox_ro'@'{{.RemoteAccess}}';
SET DEFAULT ROLE R_READ_ONLY TO 'msandbox_ro'@'{{.RemoteAccess}}';

GRANT R_READ_ONLY TO 'msandbox_ro'@'localhost';
SET DEFAULT ROLE R_READ_ONLY TO 'msandbox_ro'@'localhost';

GRANT R_REPLICATION TO '{{.RplUser}}'@'{{.RemoteAccess}}';
SET DEFAULT ROLE R_REPLICATION TO '{{.RplUser}}'@'{{.RemoteAccess}}';

CREATE SCHEMA IF NOT EXISTS TEST;
`

	add_option_template string = `#!/bin/bash
{{.Copyright}}
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}

curdir="{{.SandboxDir}}"
cd $curdir

if [ -z "$*" ]
then
    echo "# Syntax $0 options-for-my.cnf [more options] "
    exit
fi

CHANGED=''
for OPTION in $@
do
    option_exists=$(grep $OPTION ./my.sandbox.cnf)
    if [ -z "$option_exists" ]
    then
        echo "$OPTION" >> my.sandbox.cnf
        echo "# option '$OPTION' added to configuration file"
        CHANGED=1
    else
        echo "# option '$OPTION' already exists configuration file"
    fi
done

if [ -n "$CHANGED" ]
then
    ./restart
fi
`
	show_binlog_template string = `#!/bin/bash
{{.Copyright}}
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}

curdir="{{.SandboxDir}}"
cd $curdir

if [ ! -d ./data ]
then
    echo "$curdir/data not found"
    exit 1
fi

pattern=$1
[ -z "$pattern" ] && pattern='[0-9]*'
if [ "$pattern" == "-h" -o "$pattern" == "--help" -o "$pattern" == "-help" -o "$pattern" == "help" ]
then
    echo "# Usage: $0 [BINLOG_PATTERN] "
    echo "# Where BINLOG_PATTERN is a number, or part of a number used after 'mysql-bin'"
    echo "# (The default is '[0-9]*]')"
    echo "# examples:"
    echo "#          ./show_binlog 000001 | less "
    echo "#          ./show_binlog 000012 | vim - "
    echo "#          ./show_binlog  | grep -i 'CREATE TABLE'"
    exit 0
fi
# set -x
last_binlog=$(ls -lotr data/mysql-bin.$pattern | tail -n 1 | awk '{print $NF}')

if [ -z "$last_binlog" ]
then
    echo "No binlog found in $curdir/data"
    exit 1
fi

# Checks if the output is a terminal or a pipe
if [  -t 1 ]
then
    echo "###################### WARNING ####################################"
    echo "# You are not using a pager."
    echo "# The output of this script can be quite large."
    echo "# Please pipe this script with a pager, such as 'less' or 'vim -'"
    echo "# ENTER 'q' to exit or simply RETURN to continue without a pager"
    read answer
    if [ "$answer" == "q" ]
    then
        exit
    fi
fi

(printf "#\n# Showing $last_binlog\n#\n" ; ./my sqlbinlog --verbose $last_binlog )
`
	my_template string = `#!/bin/bash
{{.Copyright}}
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}


if [ "$1" = "" ]
then
    echo "syntax my sql{dump|binlog|admin} arguments"
    exit
fi

SBDIR="{{.SandboxDir}}"
source $SBDIR/sb_include
BASEDIR={{.Basedir}}
export LD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$LD_LIBRARY_PATH
export DYLD_LIBRARY_PATH=$BASEDIR/lib:$BASEDIR/lib/mysql:$DYLD_LIBRARY_PATH
MYSQL=$BASEDIR/bin/mysql

SUFFIX=$1
shift

MYSQLCMD="$BASEDIR/bin/my$SUFFIX"

NODEFAULT=(myisam_ftdump
myisamlog
mysql_config
mysql_convert_table_format
mysql_find_rows
mysql_fix_extensions
mysql_fix_privilege_tables
mysql_secure_installation
mysql_setpermission
mysql_tzinfo_to_sql
mysql_config_editor
mysql_waitpid
mysql_zap
mysqlaccess
mysqlbinlog
mysqlbug
mysqldumpslow
mysqlhotcopy
mysqltest
mysqltest_embedded)

DEFAULTSFILE="--defaults-file=$SBDIR/my.sandbox.cnf"

for NAME in ${NODEFAULT[@]}
do
    if [ "my$SUFFIX" = "$NAME" ]
    then
        DEFAULTSFILE=""
        break
    fi
done

if [ -f $MYSQLCMD ]
then
    $MYSQLCMD $DEFAULTSFILE "$@"
else
    echo "$MYSQLCMD not found "
fi
`
	show_relaylog_template string = `#!/bin/bash
{{.Copyright}}
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}
curdir="{{.SandboxDir}}"
cd $curdir

if [ ! -d ./data ]
then
    echo "$curdir/data not found"
    exit 1
fi
relay_basename=$1
[ -z "$relay_basename" ] && relay_basename='mysql-relay'
pattern=$2
[ -z "$pattern" ] && pattern='[0-9]*'
if [ "$pattern" == "-h" -o "$pattern" == "--help" -o "$pattern" == "-help" -o "$pattern" == "help" ]
then
    echo "# Usage: $0 [ relay-base-name [BINLOG_PATTERN]] "
    echo "# Where relay-basename is the initial part of the relay ('$relay_basename')"
    echo "# and BINLOG_PATTERN is a number, or part of a number used after '$relay_basename'"
    echo "# (The default is '[0-9]*]')"
    echo "# examples:"
    echo "#          ./show_relaylog relay-log-alpha 000001 | less "
    echo "#          ./show_relaylog relay-log 000012 | vim - "
    echo "#          ./show_relaylog  | grep -i 'CREATE TABLE'"
    exit 0
fi
# set -x
last_relaylog=$(ls -lotr data/$relay_basename.$pattern | tail -n 1 | awk '{print $NF}')

if [ -z "$last_relaylog" ]
then
    echo "No relay log found in $curdir/data"
    exit 1
fi

# Checks if the output is a terminal or a pipe
if [  -t 1 ]
then
    echo "###################### WARNING ####################################"
    echo "# You are not using a pager."
    echo "# The output of this script can be quite large."
    echo "# Please pipe this script with a pager, such as 'less' or 'vim -'"
    echo "# ENTER 'q' to exit or simply RETURN to continue without a pager"
    read answer
    if [ "$answer" == "q" ]
    then
        exit
    fi
fi

(printf "#\n# Showing $last_relaylog\n#\n" ; ./my sqlbinlog --verbose $last_relaylog )
`
	test_sb_template string = `#!/bin/bash
{{.Copyright}}
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}
SBDIR="{{.SandboxDir}}"
cd $SBDIR

PIDFILE=$SBDIR/data/mysql_sandbox{{.Port}}.pid

function is_running
{
	if [ -f $PIDFILE ]
	then
		MYPID=$(cat $PIDFILE)
		ps -p $MYPID | grep $MYPID
	fi
}

fail=0
pass=0
TIMEOUT=180
expected_port={{.Port}}
expected_version=$(echo "{{.Version}}" | tr -d 'A-Z,a-z,_-')


if [ -f sbdescription.json ]
then
	sb_single=$(grep 'type' sbdescription.json| grep 'single')
fi

function test_query {
    user=$1
    query="$2"
    expected=$3
	./use -BN -u $user -e "$query" > /dev/null 2>&1
    exit_code=$?
    if [ "$exit_code" == "$expected" ]
    then
		msg="was successful"
		if [ "$expected" != "0" ]
		then
			msg="failed as expected"
		fi
        echo "ok - query $msg for user $user: '$query'"
        pass=$((pass+1))
    else
        echo "not ok - query failed for user $user: '$query'"
        fail=$((fail+1))
    fi
}

if [ -z "$(is_running)" ]
then
	echo "not ok - server stopped"
    fail=$((fail+1))
else
    version=$(./use -BN -e "select version()")
    port=$(./use -BN -e "show variables like 'port'" | awk '{print $2}')
    if [ -n "$version" ]
    then
        echo "ok - version '$version'"
        pass=$((pass+1))
    else
        echo "not ok - no version detected"
        fail=$((fail+1))
    fi
    if [ -n "$port" ]
    then
        echo "ok - port detected: $port"
        pass=$((pass+1))
    else
        echo "not ok - no port detected"
        fail=$((fail+1))
    fi
    
    if [ -n "$( echo $version| grep $expected_version)" ]
    then
        echo "ok - version is $version as expected"
        pass=$((pass+1))
    else
        echo "not ok - version detected ($version) but expected was $expected_version"
        fail=$((fail+1))
    fi
    if [ "$port" == "$expected_port" ]
    then
        echo "ok - port is $port as expected"
        pass=$((pass+1))
    else
        echo "not ok - port detected ($port) but expected was $expected_port"
        fail=$((fail+1))
    fi
	ro_query='use mysql; select count(*) from information_schema.tables where table_schema=schema()'
    create_query='create table if not exists test.txyz(i int)'
    drop_query='drop table if exists test.txyz'
    test_query msandbox_ro 'select 1' 0
    test_query msandbox_rw 'select 1' 0
    test_query msandbox_ro "$ro_query" 0
    test_query msandbox_rw "$ro_query" 0
	if [ -n "$sb_single" ]
	then
        test_query msandbox_ro "$create_query" 1
        test_query msandbox_rw "$create_query" 0
        test_query msandbox_rw "$drop_query" 0
	fi
fi
fail_label="fail"
pass_label="PASS"
exit_code=0
tests=$(($pass+$fail))
if [ "$fail" != "0" ]
then
	fail_label="FAIL"
	pass_label="pass"
	exit_code=1
fi
printf "# Tests : %5d\n" $tests
printf "# $pass_label  : %5d \n" $pass
printf "# $fail_label  : %5d \n" $fail
exit $exit_code
`
	replication_options string = `
relay-log-index=mysql-relay
relay-log=mysql-relay
log-bin=mysql-bin
log-error=msandbox.err
`
	semisync_master_options string = `
plugin-load=rpl_semi_sync_master=semisync_master.so
#rpl_semi_sync_master_enabled=1
`
	semisync_slave_options string = `
plugin-load=rpl_semi_sync_slave=semisync_slave.so
#rpl_semi_sync_slave_enabled=1
`
	gtid_options string = `
master-info-repository=table
relay-log-info-repository=table
gtid_mode=ON
log-slave-updates
enforce-gtid-consistency
`
	expose_dd_tables string = `
set persist debug='+d,skip_dd_table_access_check';
set @col_type=(select c.type from mysql.columns c inner join mysql.tables t where t.id=table_id and t.name='tables' and c.name='hidden');
set @visible=(if(@col_type = 'MYSQL_TYPE_ENUM', 'Visible', '0'));
set @hidden=(if(@col_type = 'MYSQL_TYPE_ENUM', 'System', '1'));
create table sys.dd_hidden_tables (id bigint unsigned not null primary key, name varchar(64), schema_id bigint unsigned);
insert into sys.dd_hidden_tables select id, name, schema_id from mysql.tables where hidden=@hidden;
update mysql.tables set hidden=@visible where hidden=@hidden and schema_id = 1
`

	sb_locked_template string = `#!/bin/bash
{{.Copyright}}
# Generated by mysql_minimum_permissions tool {{.AppVersion}} using {{.TemplateName}} on {{.DateTime}}
echo "This sandbox is locked."
echo "The '{{.ClearCmd}}' command has been disabled."
echo "The contents of the old '{{.ClearCmd}}' command are in the '{{.NoClearCmd}}' file"
echo 'To remove the lock, run "mysql_minimum_permissions tool admin unlock {{.SandboxDir}}"'
`
	no_op_mock_template string = `#!/bin/bash
# The purpose of this script is to run mock tests with a
# command that returns a wanted exit code
exit_code=0
 
# The calling procedure can set FAILMOCK to
# force a failing result.
if [ -n "$FAILMOCK" ]
then
    exit_code=$FAILMOCK
fi
# If MOCKMSG is set, the script will display its contents
if [ -n "$MOCKMSG" ]
then
	echo $MOCKMSG
fi

exit $exit_code`

	mysqld_safe_mock_template string = `#!/bin/bash
# This script mimicks the minimal behavior of mysqld_safe
# so that we can run tests for mysql_minimum_permissions tool without using the real
# MySQL binaries.
defaults_file=$1
if [ -z "$defaults_file" ]
then
    echo "No defaults file provided: use --defaults-file=filename"
    exit 1
fi
valid_defaults=$(echo $defaults_file | grep '--defaults-file')
if [ -z "$defaults_file" ]
then
    echo "Not a valid defaults-file spec"
    exit 1
fi
defaults_file=$(echo $defaults_file| sed 's/--defaults-file=//')

if [ ! -f "$defaults_file" ]
then
    echo "defaults file $defaults_file not found"
    exit 1
fi

pid_file=$(grep pid-file $defaults_file | awk '{print $3}')

if [ -z "$pid_file" ]
then
    echo "PID file not found in  $defaults_file"
    exit 1
fi

touch $pid_file

exit 0
`
	sb_include_template string = ""

	SingleTemplates = TemplateCollection{
		"Copyright": TemplateDesc{
			Description: "Copyright for every sandbox script",
			Notes:       "",
			Contents:    Copyright,
		},
		"replication_options": TemplateDesc{
			Description: "Replication options for my.cnf",
			Notes:       "",
			Contents:    replication_options,
		},
		"semisync_master_options": TemplateDesc{
			Description: "master semi-synch options for my.cnf",
			Notes:       "",
			Contents:    semisync_master_options,
		},
		"semisync_slave_options": TemplateDesc{
			Description: "slave semi-synch options for my.cnf",
			Notes:       "",
			Contents:    semisync_slave_options,
		},
		"gtid_options": TemplateDesc{
			Description: "GTID options for my.cnf",
			Notes:       "",
			Contents:    gtid_options,
		},
		"expose_dd_tables": TemplateDesc{
			Description: "Commands needed to enable data dictionary table usage",
			Notes:       "",
			Contents:    expose_dd_tables,
		},
		"init_db_template": TemplateDesc{
			Description: "Initialization template for the database",
			Notes:       "This should normally run only once",
			Contents:    init_db_template,
		},
		"start_template": TemplateDesc{
			Description: "starts the database in a single sandbox (with optional mysqld arguments)",
			Notes:       "",
			Contents:    start_template,
		},
		"use_template": TemplateDesc{
			Description: "Invokes the MySQL client with the appropriate options",
			Notes:       "",
			Contents:    use_template,
		},
		"stop_template": TemplateDesc{
			Description: "Stops a database in a single sandbox",
			Notes:       "",
			Contents:    stop_template,
		},
		"clear_template": TemplateDesc{
			Description: "Remove all data from a single sandbox",
			Notes:       "",
			Contents:    clear_template,
		},
		"my_cnf_template": TemplateDesc{
			Description: "Default options file for a sandbox",
			Notes:       "",
			Contents:    my_cnf_template,
		},
		"status_template": TemplateDesc{
			Description: "Shows the status of a single sandbox",
			Notes:       "",
			Contents:    status_template,
		},
		"restart_template": TemplateDesc{
			Description: "Restarts the database (with optional mysqld arguments)",
			Notes:       "",
			Contents:    restart_template,
		},
		"send_kill_template": TemplateDesc{
			Description: "Sends a kill signal to the database",
			Notes:       "",
			Contents:    send_kill_template,
		},
		"load_grants_template": TemplateDesc{
			Description: "Loads the grants defined for the sandbox",
			Notes:       "",
			Contents:    load_grants_template,
		},
		"grants_template5x": TemplateDesc{
			Description: "Grants for sandboxes up to 5.6",
			Notes:       "",
			Contents:    grants_template5x,
		},
		"grants_template57": TemplateDesc{
			Description: "Grants for sandboxes from 5.7+",
			Notes:       "",
			Contents:    grants_template57,
		},
		"grants_template8x": TemplateDesc{
			Description: "Grants for sandboxes from 8.0+",
			Notes:       "",
			Contents:    grants_template8x,
		},
		"my_template": TemplateDesc{
			Description: "Prefix script to run every my* command line tool",
			Notes:       "",
			Contents:    my_template,
		},
		"add_option_template": TemplateDesc{
			Description: "Adds options to the my.sandbox.cnf file and restarts",
			Notes:       "",
			Contents:    add_option_template,
		},
		"show_binlog_template": TemplateDesc{
			Description: "Shows a binlog for a single sandbox",
			Notes:       "",
			Contents:    show_binlog_template,
		},
		"show_relaylog_template": TemplateDesc{
			Description: "Show the relaylog for a single sandbox",
			Notes:       "",
			Contents:    show_relaylog_template,
		},
		"test_sb_template": TemplateDesc{
			Description: "Tests basic sandbox functionality",
			Notes:       "",
			Contents:    test_sb_template,
		},
		"sb_locked_template": TemplateDesc{
			Description: "locked sandbox script",
			Notes:       "This script is replacing 'clear' when the sandbox is locked",
			Contents:    sb_locked_template,
		},
		"sb_include_template": TemplateDesc{
			Description: "TBD",
			Notes:       "",
			Contents:    sb_include_template,
		},
	}
	MockTemplates = TemplateCollection{
		"no_op_mock_template": TemplateDesc{
			Description: "mock script that does nothing",
			Notes:       "Used for internal tests",
			Contents:    no_op_mock_template,
		},
		"mysqld_safe_mock_template": TemplateDesc{
			Description: "mock script for mysqld_safe",
			Notes:       "Used for internal tests",
			Contents:    mysqld_safe_mock_template,
		},
	}
)
